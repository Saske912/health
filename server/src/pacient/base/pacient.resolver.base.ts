/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePacientArgs } from "./CreatePacientArgs";
import { UpdatePacientArgs } from "./UpdatePacientArgs";
import { DeletePacientArgs } from "./DeletePacientArgs";
import { PacientFindManyArgs } from "./PacientFindManyArgs";
import { PacientFindUniqueArgs } from "./PacientFindUniqueArgs";
import { Pacient } from "./Pacient";
import { DestinationFindManyArgs } from "../../destination/base/DestinationFindManyArgs";
import { Destination } from "../../destination/base/Destination";
import { User } from "../../user/base/User";
import { PacientService } from "../pacient.service";

@graphql.Resolver(() => Pacient)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PacientResolverBase {
  constructor(
    protected readonly service: PacientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "read",
    possession: "any",
  })
  async _pacientsMeta(
    @graphql.Args() args: PacientFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pacient])
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "read",
    possession: "any",
  })
  async pacients(
    @graphql.Args() args: PacientFindManyArgs
  ): Promise<Pacient[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pacient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "read",
    possession: "own",
  })
  async pacient(
    @graphql.Args() args: PacientFindUniqueArgs
  ): Promise<Pacient | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pacient)
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "create",
    possession: "any",
  })
  async createPacient(
    @graphql.Args() args: CreatePacientArgs
  ): Promise<Pacient> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        doctor: args.data.doctor
          ? {
              connect: args.data.doctor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pacient)
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "update",
    possession: "any",
  })
  async updatePacient(
    @graphql.Args() args: UpdatePacientArgs
  ): Promise<Pacient | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          doctor: args.data.doctor
            ? {
                connect: args.data.doctor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pacient)
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "delete",
    possession: "any",
  })
  async deletePacient(
    @graphql.Args() args: DeletePacientArgs
  ): Promise<Pacient | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Destination])
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "read",
    possession: "any",
  })
  async destinations(
    @graphql.Parent() parent: Pacient,
    @graphql.Args() args: DestinationFindManyArgs
  ): Promise<Destination[]> {
    const results = await this.service.findDestinations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async doctor(@graphql.Parent() parent: Pacient): Promise<User | null> {
    const result = await this.service.getDoctor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
